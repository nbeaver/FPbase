name: CI

on: [push]

jobs:

  test:
    runs-on: ubuntu-18.04

    services:
      postgres:
        image: postgres:11.6
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      
      - name: setup python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: cache pip modules
        uses: actions/cache@v1
        id: pipcache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: cache node modules
        uses: actions/cache@v1
        id: nodecache
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install python dependencies
        run: |
          sudo apt-get install -qq gfortran libopenblas-dev liblapack-dev python-dev libpq-dev
          pip install -r requirements/test.txt
        if: steps.pipcache.outputs.cache-hit != 'true'
      
      - name: Install node dependencies
        run: npm install
        if: steps.nodecache.outputs.cache-hit != 'true'

      - name: pytest
        env:
          DJANGO_SETTINGS_MODULE: config.settings.test
          # SECRETS_FILE: .confidential/ci.json
        run: |
          createdb fpbase
          npm run build
          python manage.py migrate --noinput
          python manage.py collectstatic
          pytest --cov=fpbase --cov=proteins
          coverage xml
          python-codacy-coverage -r coverage.xml

# before_install:
#   - createdb fpbase
# #  - sudo psql -U postgres -c 'create database fpbase;'
#   - sudo apt-get update -qq
#   - sudo apt-get install -qq build-essential gettext python-dev zlib1g-dev libpq-dev xvfb
#   - sudo apt-get install -qq libtiff5-dev libjpeg8-dev libfreetype6-dev liblcms2-dev libwebp-dev
#   - sudo apt-get install -qq graphviz-dev python-setuptools python3-dev python-virtualenv python-pip
#   - sudo apt-get install -qq firefox automake libtool libreadline6 libreadline6-dev libreadline-dev
#   - sudo apt-get install -qq libsqlite3-dev libxml2 libxml2-dev libssl-dev libbz2-dev wget curl llvm

# install:
#   - pip install -r requirements/test.txt
#   - npm install
#   - npm run build

# before_script:
#   - python manage.py migrate --noinput
#   - python manage.py collectstatic

# script:
#   - pytest --cov=fpbase --cov=proteins
#   - coverage xml
#   - python-codacy-coverage -r coverage.xml
